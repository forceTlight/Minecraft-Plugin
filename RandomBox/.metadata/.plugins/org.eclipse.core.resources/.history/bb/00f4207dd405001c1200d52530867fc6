package event;

import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.Set;

import org.bukkit.Bukkit;
import org.bukkit.ChatColor;
import org.bukkit.Sound;
import org.bukkit.entity.Player;
import org.bukkit.event.EventHandler;
import org.bukkit.event.Listener;
import org.bukkit.event.block.Action;
import org.bukkit.event.player.PlayerDropItemEvent;
import org.bukkit.event.player.PlayerInteractEvent;
import org.bukkit.event.player.PlayerMoveEvent;
import org.bukkit.inventory.ItemStack;
import org.bukkit.scheduler.BukkitRunnable;
import org.bukkit.scheduler.BukkitScheduler;
import org.bukkit.scheduler.BukkitTask;

import data.DataManager;
import main.Main;
import net.minecraft.server.v1_12_R1.Material;

public class RandomBoxEvent implements Listener {
	private DataManager data = Main.data;
	private Main plugin = Main.main;
	HashMap<String, String> map = new HashMap<>();
	HashMap<String, Integer> task_map = new HashMap<>();
	int task_id;
	@EventHandler
	public void onClickRandomBoxEvent(PlayerInteractEvent e) {
		
		if (e.getAction() == Action.RIGHT_CLICK_AIR) {
			Player p = e.getPlayer();
			if(task_map.containsKey(p.getName().toString())) {
				e.setCancelled(true);
				return;
			}
			ItemStack item = p.getInventory().getItemInMainHand();
			ItemStack tmp_item = p.getInventory().getItemInMainHand();
			Set<String> keys = data.getFile().getConfigurationSection("randomBox").getKeys(true);
			Iterator<String> iter = keys.iterator();
			p.sendMessage(item.toString());
			while (iter.hasNext()) {
				String name = iter.next();
				if ((data.getFile().getItemStack("randomBox." + name) != null) && 
						(data.getFile().getItemStack("randomBox." + name).getItemMeta().equals(item.getItemMeta()))) {
					p.sendMessage(item.getItemMeta().toString());
					item.setAmount(item.getAmount()-1);
					p.getInventory().setItemInMainHand(item);
					BukkitScheduler scheduler = Bukkit.getScheduler();
					map.put(p.getName().toString(), "true");
					task_id = scheduler.scheduleSyncRepeatingTask(plugin, new Runnable() {
						int cnt = 0;
						@Override
						public void run() {
							if(cnt == 0)
								task_map.put(p.getName().toString(), task_id);
							if(cnt > 10) { // 카운트가 다 세졌을 때
								scheduler.cancelTask(task_map.get(p.getName().toString()));
								task_map.remove(p.getName());
							}else if(!map.containsKey(p.getName().toString())) { // 중간에 취소됐을 때
								scheduler.cancelTask(task_map.get(p.getName().toString()));
								task_map.remove(p.getName());
								if(item.getAmount() == 0) {
									tmp_item.setAmount(1);
									p.getInventory().setItemInMainHand(tmp_item);
								}else {
									item.setAmount(item.getAmount()+1);
									p.getInventory().setItemInMainHand(item);
								}
							}
								switch (cnt) {
								case 0:
									p.sendTitle(ChatColor.GRAY + "" + ChatColor.BOLD +"| | | | | | | | | |", "랜덤박스 오픈 중!", 1, 20, 1);
									break;
								case 1:
									p.sendTitle(ChatColor.DARK_RED + "" + ChatColor.BOLD + "|" + ChatColor.GRAY + "" + ChatColor.BOLD + " | | | | | | | | |", "랜덤박스 오픈 중!", 1, 20, 1);
									break;
								case 2:
									p.sendTitle(ChatColor.RED + "" + ChatColor.BOLD +"| |"  + ChatColor.GRAY + "" + ChatColor.BOLD + " | | | | | | | |", "랜덤박스 오픈 중!", 1, 20, 1);
									break;
								case 3:
									p.sendTitle(ChatColor.RED + "" + ChatColor.BOLD +"| | |" + ChatColor.GRAY + "" + ChatColor.BOLD + " | | | | | | |", "랜덤박스 오픈 중!", 1, 20, 1);
									break;
								case 4:
									p.sendTitle(ChatColor.GOLD + "" + ChatColor.BOLD +"| | | |" + ChatColor.GRAY + "" + ChatColor.BOLD + " | | | | | |", "랜덤박스 오픈 중!", 1, 20, 1);
									break;
								case 5:
									p.sendTitle(ChatColor.GOLD + "" + ChatColor.BOLD +"| | | | |"+ ChatColor.GRAY + "" + ChatColor.BOLD + " | | | | |", "랜덤박스 오픈 중!", 1, 20, 1);
									break;
								case 6:
									p.sendTitle(ChatColor.YELLOW + "" + ChatColor.BOLD +"| | | | | |"+ ChatColor.GRAY + "" + ChatColor.BOLD +" | | | |", "랜덤박스 오픈 중!", 1, 20, 1);
									break;
								case 7:
									p.sendTitle(ChatColor.YELLOW + "" + ChatColor.BOLD +"| | | | | | |"+ ChatColor.GRAY + "" + ChatColor.BOLD +" | | |", "랜덤박스 오픈 중!", 1, 20, 1);
									break;
								case 8:
									p.sendTitle(ChatColor.DARK_GREEN + "" + ChatColor.BOLD +"| | | | | | | |" + ChatColor.GRAY + "" + ChatColor.BOLD +" | |", "랜덤박스 오픈 중!", 1, 20, 1);
									break;
								case 9:
									p.sendTitle(ChatColor.DARK_GREEN + "" + ChatColor.BOLD +"| | | | | | | | |" + ChatColor.GRAY + "" + ChatColor.BOLD +" |", "랜덤박스 오픈 중!", 1, 20, 1);
									break;
								case 10:
									p.sendTitle(ChatColor.GREEN + "" + ChatColor.BOLD +"| | | | | | | | | |", "랜덤박스 오픈 중!", 1, 20, 1);
									break;
								}
								p.playSound(p.getLocation(), Sound.BLOCK_NOTE_BASEDRUM, 1, 0.2f * cnt);
								cnt++;
						}
					}, 0L, 10L);
					
				}
			}
		}
	}
	@EventHandler
	public void onPlayerMoveEvent(PlayerMoveEvent e) {
		Player p = e.getPlayer();
		p.sendMessage("움직임");
		if(map.containsKey(p.getName().toString()))
			map.remove(p.getName().toString());
	}
	@EventHandler
	public void onPlayerDropItemEvent(PlayerDropItemEvent e) {
		Player p = e.getPlayer();
		p.sendMessage("아이템 버림");
		if(map.containsKey(p.getName().toString()) || task_map.containsKey(p.getName().toString())) {
			map.remove(p.getName().toString());
			e.setCancelled(true);
		}
			
	}
}
